

<style>
  .custom-select-wrapper {
  position: relative;
  display: inline-block;
}

.custom-select {
  border: 1px solid #ccc;
  border-radius: 4px;
  cursor: pointer;
  padding: 10px;
  background-color: white;
}

.custom-select .selected-option {
  background-color: lightgray;
  color: black;
  padding: 10px;
  border-radius: 4px;
}

.custom-select .options {
  display: none;
  position: absolute;
  background-color: white;
  border: 1px solid #ccc;
  border-radius: 4px;
  width: 100%;
  max-height: 200px;
  overflow-y: auto;
}

.custom-select .option {
  padding: 10px;
  cursor: pointer;
}

.custom-select .option:hover,
.custom-select .option.selected {
  background-color: lightblue;
}

.custom-select .option[data-status='active'] {
  background-color: lightgreen;
}

.custom-select .option[data-status='inactive'] {
  background-color: lightyellow;
}

.custom-select .option[data-status='suspended'] {
  background-color: lightcoral;
}

.custom-select .option[data-status='unknown'] {
  background-color: lightgray;
}
</style>



  <div class="container mt-4">
    <h1 class="mb-4">ユーザー情報の編集</h1>
<%= simple_form_for(@user, as: @user, url: admin_user_path(@user), html: { method: :patch, multipart: true }) do |f| %>
  <%= f.error_notification %>

  <div class="form-inputs">
    <%= f.input :name, label: "名前", required: true %>
    <%= f.input :email, label: "メールアドレス", required: true %>
    <%= f.input :profile_image, label: "プロフィール写真", as: :file, input_html: { accept: 'image/*', onchange: 'loadPreview(this);' } %>
    <% if @user.profile_image.attached? %>
      <%= image_tag @user.profile_image.variant(resize: "100x100").processed, id: 'profile-preview' %>
    <% else %>
      <img id="profile-preview" src="<%= asset_path('no_image.jpg') %>" alt="プロフィール画像のプレビュー" />
    <% end %>
    <%= f.input :introduction, label: "自己紹介", as: :text %>

    <div class="form-group">
      <%= f.label :status, 'ステータス', class: 'form-label' %>
      <div class="custom-select-wrapper">
        <div class="custom-select">
          <div class="selected-option" data-status="<%= @user.status %>">
            <%= @user.status.capitalize %>
          </div>
          <div class="options">
            <% User::STATUSES.each do |status| %>
              <div class="option" data-status="<%= status %>">
                <%= status.capitalize %>
              </div>
            <% end %>
          </div>
        </div>
        <%= f.hidden_field :status, id: 'status-input' %>
      </div>
    </div>

    <div class="form-group mt-4">
      <%= f.submit '保存', class: 'btn btn-primary' %>
      <%= link_to 'キャンセル', admin_users_path, class: 'btn btn-secondary ml-2' %>
    </div>
  </div>
<% end %>



<script>
  document.addEventListener('DOMContentLoaded', function() {
    const customSelect = document.querySelector('.custom-select');
    const selectedOption = customSelect.querySelector('.selected-option');
    const options = customSelect.querySelector('.options');
    const statusInput = document.getElementById('status-input');
  
    selectedOption.addEventListener('click', function() {
      options.style.display = options.style.display === 'block' ? 'none' : 'block';
    });
  
    options.addEventListener('click', function(event) {
      if (event.target.classList.contains('option')) {
        const status = event.target.getAttribute('data-status');
        selectedOption.textContent = event.target.textContent;
        selectedOption.setAttribute('data-status', status);
        statusInput.value = status;
        options.style.display = 'none';
  
        // 色を動的に変更
        Array.from(options.children).forEach(option => {
          option.classList.remove('selected');
        });
        event.target.classList.add('selected');
      }
    });
  
    document.addEventListener('click', function(event) {
      if (!customSelect.contains(event.target)) {
        options.style.display = 'none';
      }
    });
  });
</script>

<script>
  function loadPreview(input) {
    var preview = document.getElementById('profile-preview');
    if (input.files && input.files[0]) {
        var reader = new FileReader();
        reader.onload = function(e) {
            preview.src = e.target.result;
        };
        reader.readAsDataURL(input.files[0]);
    }
  }
</script>