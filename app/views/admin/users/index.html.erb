<h1>ユーザー一覧</h1>

<div class="mb-4">
  <%= form_with url: admin_users_path, method: :get, local: true, class: "form-inline" do |f| %>
    <div class="form-group mr-2">
      <%= f.label :query, "検索:", class: "sr-only" %>
      <%= f.text_field :query, value: params[:query], class: "form-control", placeholder: "名前やメールアドレスで検索" %>
    </div>
    <div class="form-group">
      <%= f.submit "検索", class: "btn btn-primary" %>
    </div>
  <% end %>
</div>

<table class="table">
  <thead>
    <tr>
      <th>ID</th>
      <th>名前</th>
      <th>Email</th>
      <th>ステータス</th>
      <th>操作</th>
    </tr>
  </thead>
  <tbody>
    <% @users.each do |user| %>
      <tr>
        <td><%= user.id %></td>
        <td><%= user.name %></td>
        <td><%= user.email %></td>
        <td>
          <%= form_with(model: user, url: admin_user_path(user), method: :patch, local: true) do |form| %>
            <div class="status-select-wrapper">
              <%= form.select :status, User::STATUSES.map { |status| [status.capitalize, status] }, {}, class: 'form-control status-select', data: { status: user.status } %>
            </div>
            <%= form.submit '更新', class: 'btn btn-primary mt-2' %>
          <% end %>
        </td>
        <td>
          <%= link_to '編集', edit_admin_user_path(user), class: 'btn btn-warning' %>
          <%= link_to '削除', admin_user_path(user), method: :delete, data: { confirm: '本当に削除しますか？' }, class: 'btn btn-danger' %>
        </td>
      </tr>
    <% end %>
  </tbody>
</table>

<%= paginate @users%>



<script>
  document.addEventListener('DOMContentLoaded', function() {
    var selectElements = document.querySelectorAll('.status-select');
  
    // ページ読み込み時に現在のステータスに基づいて色を適用
    selectElements.forEach(function(select) {
      var status = select.dataset.status;
      select.classList.add(getStatusClass(status));
      
      select.addEventListener('change', function() {
        // 選択変更時に色を適用
        var selectedOption = select.options[select.selectedIndex];
        select.className = 'form-control status-select ' + getStatusClass(selectedOption.value);
      });
    });
  
    function getStatusClass(status) {
      switch (status) {
        case 'active':
          return 'status-active';
        case 'inactive':
          return 'status-inactive';
        case 'suspended':
          return 'status-suspended';
        default:
          return 'status-unknown';
      }
    }
  });
</script>